{"version":3,"file":"src_app_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/auth/account.service.ts","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccountService {\r\n\r\n  private baseUrl = 'https://portfolio-management-api-project-icg-shanghai-b19-payments.apps.oscluster1.fnkn.p1.openshiftapps.com/account';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(name: string,password:string): Observable<any> {\r\n    const data = {\r\n      name: name,\r\n      password: password,\r\n    };\r\n    return this.http.post(`${this.baseUrl}/login`,data);\r\n  }\r\n\r\n  register(name: string,password:string): Observable<any> {\r\n    const data = {\r\n      name: name,\r\n      password: password,\r\n    };\r\n    return this.http.post(`${this.baseUrl}/register`,data);\r\n  }\r\n\r\n  // // createEmployee(employee: Object): Observable<Object> {\r\n  // //   return this.http.post(`${this.baseUrl}`, employee);\r\n  // // }\r\n\r\n  // updateStock(name: string, currentPrice: any): Observable<Object> {\r\n  //   return this.http.put(`${this.baseUrl}/${name}`, currentPrice);\r\n  // }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NgxLoginComponent } from './login/login.component'; \r\nimport { NbAuthComponent } from '@nebular/auth';\r\nimport { NgxRegisterComponent } from './register/register.component';\r\n\r\nexport const routes: Routes = [\r\n  // .. here goes our components routes\r\n  {\r\n    path: '',\r\n    component: NbAuthComponent,\r\n    children: [\r\n      {\r\n        path: 'login',\r\n        component: NgxLoginComponent, // <---\r\n      },\r\n      {\r\n        path: 'register',\r\n        component: NgxRegisterComponent, // <---\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class NgxAuthRoutingModule {\r\n}","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { NgxAuthRoutingModule } from './auth-routing.module';\r\nimport { NbAuthModule } from '@nebular/auth';\r\nimport { \r\n  NbAlertModule,\r\n  NbButtonModule,\r\n  NbCardModule,\r\n  NbCheckboxModule,\r\n  NbInputModule,\r\n  NbSpinnerModule\r\n} from '@nebular/theme';\r\n\r\nimport { NgxLoginComponent } from './login/login.component';\r\nimport { NgxRegisterComponent } from './register/register.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    NbAlertModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    NbCheckboxModule,\r\n    NgxAuthRoutingModule,\r\n    NbCardModule,\r\n    NbSpinnerModule,\r\n    NbAuthModule,\r\n  ],\r\n  declarations: [\r\n    // ... here goes our new components\r\n    NgxLoginComponent,\r\n    NgxRegisterComponent\r\n  ],\r\n})\r\nexport class NgxAuthModule {\r\n}","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { NbAuthService, NbLoginComponent } from '@nebular/auth';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { HttpClient } from \"@angular/common/http\" ;\r\nimport { HttpHeaders } from \"@angular/common/http\" ;\r\nimport { AccountService } from '../account.service';\r\nimport { Account } from '../account';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'ngx-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class NgxLoginComponent extends NbLoginComponent{\r\n  name:string\r\n  password:string\r\n  loading:boolean = false\r\n  loginSuccess:boolean = false\r\n\r\n  constructor(service: NbAuthService, cd: ChangeDetectorRef, router: Router, private accountService:AccountService){\r\n    super(service, {}, cd, router);\r\n  }\r\n\r\n  login1() {\r\n    this.loading = true;\r\n    this.accountService\r\n    .login(this.name,this.password).subscribe(data => {\r\n        if (data) {\r\n          console.log(data)\r\n          localStorage.setItem(\"account\", JSON.stringify(data));\r\n          this.loginSuccess = true; \r\n          this.router.navigate(['/pages/dashboard']);\r\n        } else {\r\n          \r\n          \r\n        }\r\n\r\n    }, \r\n    error => {\r\n      alert('Incorrent account name or password');\r\n      this.loading = false;\r\n      this.loginSuccess = false;\r\n      console.log(error)\r\n    });\r\n  }\r\n\r\n  \r\n\r\n}","<h1 id=\"title\" class=\"title\">Login</h1>\r\n<p class=\"sub-title\">Hello! Welcome to Portfolio.</p>\r\n\r\n\r\n<!-- <nb-alert *ngIf=\"loginSuccess\" outline=\"danger\" role=\"alert\">\r\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\r\n  <ul class=\"alert-message-list\">\r\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">Login Failed</li>\r\n  </ul>\r\n</nb-alert>\r\n\r\n<nb-alert *ngIf=\"loginSuccess\" outline=\"success\" role=\"alert\">\r\n  <p class=\"alert-title\"><b>Hooray!</b></p>\r\n  <ul class=\"alert-message-list\">\r\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">Login Successful</li>\r\n  </ul>\r\n</nb-alert> -->\r\n\r\n<form (ngSubmit)=\"login1()\" #form=\"ngForm\" aria-labelledby=\"title\">\r\n\r\n  <div class=\"form-control-group\">\r\n    <label class=\"label\" for=\"input-name\">Name:</label>\r\n    <input nbInput\r\n           fullWidth\r\n           [(ngModel)]=\"name\"\r\n           #email=\"ngModel\"\r\n           name=\"username\"\r\n           id=\"input-username\"\r\n           placeholder=\"Name\"\r\n           fieldSize=\"large\">\r\n  </div>\r\n\r\n  <div class=\"form-control-group\">\r\n    <span class=\"label-with-link\">\r\n      <label class=\"label\" for=\"input-password\">Password:</label>\r\n    </span>\r\n    <input nbInput\r\n           fullWidth\r\n           [(ngModel)]=\"password\"\r\n           \r\n           name=\"password\"\r\n           type=\"password\"\r\n           id=\"input-password\"\r\n           placeholder=\"Password\"\r\n           fieldSize=\"large\"\r\n           >\r\n  </div>\r\n\r\n  <div class=\"form-control-group accept-group\">\r\n    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Remember me</nb-checkbox>\r\n  </div>\r\n\r\n  <button nbButton\r\n          [nbSpinner]=\"loading\" \r\n          nbSpinnerSize=\"giant\"\r\n          nbSpinnerStatus=\"control\"\r\n          fullWidth\r\n          status=\"primary\"\r\n          size=\"large\"\r\n          [disabled]=\"submitted || !form.valid\"\r\n          [class.btn-pulse]=\"submitted\">\r\n    Log In\r\n  </button>\r\n</form>\r\n\r\n<!-- <form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\r\n\r\n  <div class=\"form-control-group\">\r\n    <label class=\"label\" for=\"input-name\">Name:</label>\r\n    <input nbInput\r\n           fullWidth\r\n           [(ngModel)]=\"user.email\"\r\n           #email=\"ngModel\"\r\n           name=\"email\"\r\n           id=\"input-email\"\r\n           pattern=\".+@.+\\..+\"\r\n           placeholder=\"Email address\"\r\n           fieldSize=\"large\"\r\n           autofocus\r\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\r\n           [required]=\"getConfigValue('forms.validation.email.required')\"\r\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\r\n    <ng-container *ngIf=\"email.invalid && email.touched\">\r\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\r\n        Email is required!\r\n      </p>\r\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\r\n        Email should be the real one!\r\n      </p>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"form-control-group\">\r\n    <span class=\"label-with-link\">\r\n      <label class=\"label\" for=\"input-password\">Password:</label>\r\n      <a class=\"forgot-password caption-2\" routerLink=\"../request-password\">Forgot Password?</a>\r\n    </span>\r\n    <input nbInput\r\n           fullWidth\r\n           [(ngModel)]=\"user.password\"\r\n           #password=\"ngModel\"\r\n           name=\"password\"\r\n           type=\"password\"\r\n           id=\"input-password\"\r\n           placeholder=\"Password\"\r\n           fieldSize=\"large\"\r\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\r\n           [required]=\"getConfigValue('forms.validation.password.required')\"\r\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\r\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\r\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\r\n    <ng-container *ngIf=\"password.invalid && password.touched \">\r\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\r\n        Password is required!\r\n      </p>\r\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\r\n        Password should contain\r\n        from {{ getConfigValue('forms.validation.password.minLength') }}\r\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\r\n        characters\r\n      </p>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"form-control-group accept-group\">\r\n    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Remember me</nb-checkbox>\r\n  </div>\r\n\r\n  <button nbButton\r\n          fullWidth\r\n          status=\"primary\"\r\n          size=\"large\"\r\n          [disabled]=\"submitted || !form.valid\"\r\n          [class.btn-pulse]=\"submitted\">\r\n    Log In\r\n  </button>\r\n</form> -->\r\n\r\n<section class=\"another-action\" aria-label=\"Register\">\r\n  Don't have an account? <a class=\"text-link\" routerLink=\"../register\">Register</a>\r\n</section>\r\n","import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NbAuthService, NbRegisterComponent } from '@nebular/auth';\r\nimport { AccountService } from '../account.service';\r\n\r\n@Component({\r\n  selector: 'ngx-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class NgxRegisterComponent extends NbRegisterComponent {\r\n  name:string\r\n  pwd:string\r\n  confirmPassword:string\r\n  loading:boolean = false\r\n\r\n  constructor(service: NbAuthService, cd: ChangeDetectorRef, router: Router, private accountService:AccountService){\r\n    super(service, {}, cd, router);\r\n  }\r\n\r\n  register() {\r\n    this.loading = true;\r\n    this.accountService\r\n    .register(this.name,this.pwd).subscribe(data => {\r\n        if (data) {\r\n          alert('Registered Successfully!');\r\n          this.router.navigate(['/auth/login']);\r\n        }\r\n    }, \r\n    error => {\r\n      alert('Account name already exists!');\r\n      this.loading = false;\r\n      console.log(error)\r\n    });\r\n  }\r\n}","<h1 id=\"title\" class=\"title\">Register</h1>\r\n\r\n<!-- <nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\r\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\r\n  <ul class=\"alert-message-list\">\r\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\r\n  </ul>\r\n</nb-alert>\r\n\r\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\r\n  <p class=\"alert-title\"><b>Hooray!</b></p>\r\n  <ul class=\"alert-message-list\">\r\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\r\n  </ul>\r\n</nb-alert> -->\r\n\r\n<form (ngSubmit)=\"register()\" #form=\"ngForm\" aria-labelledby=\"title\">\r\n\r\n  <div class=\"form-control-group\">\r\n    <label class=\"label\" for=\"input-name\">Name:</label>\r\n    <input nbInput\r\n           [(ngModel)]=\"name\"\r\n           #fullName=\"ngModel\"\r\n           id=\"input-name\"\r\n           name=\"fullName\"\r\n           placeholder=\"Account name\"\r\n           autofocus\r\n           fullWidth\r\n           fieldSize=\"large\"\r\n           [status]=\"fullName.dirty ? (fullName.invalid  ? 'danger' : 'success') : 'basic'\"\r\n           [required]=\"getConfigValue('forms.validation.fullName.required')\"\r\n           [minlength]=\"getConfigValue('forms.validation.fullName.minLength')\"\r\n           [maxlength]=\"getConfigValue('forms.validation.fullName.maxLength')\"\r\n           [attr.aria-invalid]=\"fullName.invalid && fullName.touched ? true : null\">\r\n    <ng-container *ngIf=\"fullName.invalid && fullName.touched\">\r\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.required\">\r\n        Full name is required!\r\n      </p>\r\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.minlength || fullName.errors?.maxlength\">\r\n        Full name should contains\r\n        from {{getConfigValue('forms.validation.fullName.minLength')}}\r\n        to {{getConfigValue('forms.validation.fullName.maxLength')}}\r\n        characters\r\n      </p>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"form-control-group\">\r\n    <label class=\"label\" for=\"input-password\">Password:</label>\r\n    <input nbInput\r\n           [(ngModel)]=\"pwd\"\r\n           #password=\"ngModel\"\r\n           type=\"password\"\r\n           id=\"input-password\"\r\n           name=\"password\"\r\n           placeholder=\"Password\"\r\n           fullWidth\r\n           fieldSize=\"large\"\r\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\r\n           [required]=\"getConfigValue('forms.validation.password.required')\"\r\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\r\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\r\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\r\n    <ng-container *ngIf=\"password.invalid && password.touched\">\r\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\r\n        Password is required!\r\n      </p>\r\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\r\n        Password should contain\r\n        from {{ getConfigValue('forms.validation.password.minLength') }}\r\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\r\n        characters\r\n      </p>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"form-control-group\">\r\n    <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\r\n    <input nbInput\r\n           [(ngModel)]=\"confirmPassword\"\r\n           #rePass=\"ngModel\"\r\n           type=\"password\"\r\n           id=\"input-re-password\"\r\n           name=\"rePass\"\r\n           placeholder=\"Confirm Password\"\r\n           fullWidth\r\n           fieldSize=\"large\"\r\n           [status]=\"rePass.dirty ? (rePass.invalid || password.value !== rePass.value  ? 'danger' : 'success') : 'basic'\"\r\n           [required]=\"getConfigValue('forms.validation.password.required')\"\r\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\r\n    <ng-container *ngIf=\"rePass.invalid && rePass.touched\">\r\n      <p class=\"caption status-danger\" *ngIf=\"rePass.errors?.required\">\r\n        Password confirmation is required!\r\n      </p>\r\n      <p class=\"caption status-danger\" *ngIf=\"password.value !== rePass.value && !rePass.errors?.required\">\r\n        Password does not match the confirm password.\r\n      </p>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"form-control-group accept-group\" *ngIf=\"getConfigValue('forms.register.terms')\">\r\n    <nb-checkbox name=\"terms\" [(ngModel)]=\"user.terms\" [required]=\"getConfigValue('forms.register.terms')\">\r\n      Agree to <a href=\"#\" target=\"_blank\"><strong>Terms & Conditions</strong></a>\r\n    </nb-checkbox>\r\n  </div>\r\n\r\n  <button nbButton\r\n          [nbSpinner]=\"loading\" \r\n          nbSpinnerSize=\"giant\"\r\n          nbSpinnerStatus=\"control\"\r\n          fullWidth\r\n          status=\"primary\"\r\n          size=\"large\"\r\n          [disabled]=\"submitted || !form.valid\"\r\n          [class.btn-pulse]=\"submitted\">\r\n    Register\r\n  </button>\r\n</form>\r\n\r\n\r\n<section class=\"another-action\" aria-label=\"Sign in\">\r\n  Already have an account? <a class=\"text-link\" routerLink=\"../login\">Log in</a>\r\n</section>\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}